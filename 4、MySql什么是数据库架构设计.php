<?php

1、简单聊聊：
    在实际开发中，很多程序员都是习惯一边开发，同时一边设计数据库架构，小牛个人认为，这种做法是不可取。
    按现在的流行语来说：难道你开发过程中，自己心里就没有点逼数？
    按上解，如果你一边开发，一边设计，那么到这个项目结束的时候，你心里就真的是没点逼数了。
    因为：一个正常项目开发的流程，都应该是按架构去编写代码，并预留下一个版本或多个版本的晋升空间，
         同时你更加要清楚，这种数据库架构的理念是什么，他对业务在性能上的优化有哪些帮助，这样才能写出更加贴合业务解耦，并且条理分明的代码。
    所以，身为程序员的人，先学会如何从架构再进而开发吧。

2、数据库架构常用的一些概念：
    1、垂直分割 (列打散)：
        假设，一个订单表中存在60个字段，每一页的数据显示中I/O 次数会非常大，这个时候使用垂直分割，可以将这60个字段，
        按常用和不常用类型分割成数张附表，这样就能减轻I/O开销，但其缺点是需要管理冗余列，查询所有数据时则需要join操作。

    2、水平分割 (横打散)：
        假设，比如有一个小说表，里面有一字段经常被查询，就是小说书名，经常会用来检测书名重复，
        那么如果当垂直分割无法再进一步优化I/O 的时候，我们可以使用水平分割的方式来进行进一步优化；
        比如，很多人都会选择定义一个状态码为 novel_status 的字段，用来标记小说状态，
        例如分别为：1/2/3  对应着正常/待审核/拉黑 等三种类型。
        而如果使用水平分割的话，则是将这个字段取消，建立三个架构一致的表，这样可以有效的减低I/O 消耗。
        不过，水平分割的缺点也非常明显：
        就是它会给应用增加复杂度，它通常在查询时需要多个表名，查询所有数据需要union操作。
        在许多数据库应用中，这种复杂性会超过它带来的优点，因为只要索引关键字不大，则在索引用于查询时，
        表中增加两到三倍数据量，查询时也就增加读一个索引层的磁盘次数。
        所以，建议如果经验不足的程序猿，还是不要使用水平分割去设计数据库，省得给项目留下一个不可挽回的巨坑。

    3、垂直与水平结合运用：
        这种类型再实际开发中是最常用到的，当然这需要你具备有一定的开发经验，否则只建议单独使用垂直分割进行数据库架构设计，不然你就是一个坑货......

3、什么是架构模式：
    在实际项目中，很多人会把架构模式跟架构概念混为一谈，实际上他们是两个东西。

    数据库架构主要分为两种：
    1、单库+缓存设计
    2、多库设计之主从读写分离
    
    在多库架构中，又有两种比较流行的数据存储方式：
    1、集群数据库
    2、分布式数据库

4、单库跟多库的优缺点是什么：
    很多创业型的公司，特别是以IT为核心的技术型产品公司，通常都会认为分布式主从读写分离的架构模式，才是最顶尖拉风的数据库设计。
    但一个产品在初期，往往是用不到这么分布式，为什么这么说呢？
    因为按架构进而开发，你的架构越长远，那你这个产品的开发周期，需要考虑的东西就会越多，
    并且初期数据量并不能够达到这个架构该要的负载瓶颈，那么就发挥不出它该有的作用了。
    在IT创业界有句话，叫三月一版本，三年一重构，而一次重构的架构设计，就应该是考虑到三年后的数据量，还有负载、抗压能力。

    在小牛接触了4年的PHP开发中，单库+缓存的数据库设计也完全能够轻轻松松做到百万级，乃至于千万级的数据抗压，
    所以架构模式并不是纸上谈兵，更应该按实际情况来进行选择，不应该盲目跟风，最好的东西并不一定是最适用的。

5、最后简单的说下，架构中需要注意的一些事项：
    1、模块切割，在架构一个产品之前，我们应该需要先熟悉这个产品的具体流程，并按功能将其分割成不同的模块，并分析其中是否有链接点。
    2、将一个模块单独挑出，分析哪些字段是常用，哪些字段是不常用，一般一个模块，
       可将其分割成一个主表(常用查询)，一个列附表(不常用列表显示)，数个内容附表(70—99%里都不会查询到的数据)
    3、应完全避免为空设计(免NULL)
       要尽可地把字段定义为NOT NULL 。即使应用程序无须保存NULL，也有许多表包含了可为空的列，
       这仅仅是因为它为默认选项，除非真的要保存NULL，否则就把列定义为NOT NULL。

        因为MySQL难以优化了使用了可空列的查询，它会使索引、索引统计和值更加复杂。
        可空列需要更多的存储空间，还需要在MySQL内部进行特殊处理。
        当可空列被索引的时候，每条记录都需要一个额外的字节，还能导致MyISAM中固定大小的索引（例如：一个整数列上的索引）变成可变大小的索引。

        即使要在表中存储可为空的字段，也是有办法不使用NULL的，可以考虑使用0，特殊值或字符串来代替它。

        需要注意：虽然把NULL列改为NOT NULL 带来的性能提升很小，所以除非确定它引入了问题，否则就不要把它当成优先的优化措施。
        但如果计划对该列进行索引定义，就要尽量避免把它设置为可为空（NULL）
        总结：定义了索引的列，就应该不要设置为NULL